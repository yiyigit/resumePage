{"version":3,"sources":["resumeContent.js","components/ResumeHeader.js","components/resume-contents/parts/Experience.js","components/resume-contents/parts/Project.js","components/resume-contents/parts/Edcutation.js","components/resume-contents/parts/Skills.js","components/resume-contents/ResumeContent.js","App.js","serviceWorker.js","index.js"],"names":["resumeContent","name","title","location","selfIntro","email","phone","github","experiences","company","date","details","projects","educations","major","school","skills","ResumeHeader","useState","openSnackBar","setOpenSnackBar","className","Button","color","startIcon","onClick","ReactGA","event","category","action","navigator","clipboard","writeText","then","window","open","Snackbar","autoHideDuration","onClose","handleSnackbarClose","Alert","severity","Experience","map","experience","detail","Project","project","Education","eduction","Skills","skill","Chip","clickable","label","size","ResumeContent","App","useEffect","initialize","pageview","pathname","search","Grid","container","justify","item","xs","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0261c23e.chunk.js","sourcesContent":["export const resumeContent = {\n    name: \"Yiyi Zhou\",\n    title: \"Software Engineer\",\n    location: \"Seattle\",\n    selfIntro: \"I'm lazy, nothing to tell.\",\n    email: \"yiyizhou28@gmail.com\",\n    phone: \"857-869-2863\",\n    github: \"https://github.com/yiyigit\",\n    experiences: [\n        {\n            company: \"IBM\",\n            title: \"Backend Software Engineer\",\n            date: \"June 2020 - Sept 2020\",\n            details: [\n            \"Developed features in Cluster-Updater for Kubernetes/OpenShift users to monitor each worker node usage\",\n\"Lifted coverage rate of supported cluster version from 78% to 96%\",\n\"Designed data schema and set up cronJob to fetch data every 5 minutes from MongoDB\",\n\"Aggregated the data and provided recommendations for users to configure a better flavor in IBM Cloud\",\n\"Coordinated with UI team to update the cluster overview dashboard page\",\n\"Implemented Mocha Unit Test and synced project through Travis CI to be rolled out to staging environment\"\n            ]\n        },\n        {\n            company: \"Zhejiang Hezi Business Consultant Co., Ltd\",\n            title: \"Data Analyst\",\n            date: \"Apr 2016 - May 2019\",\n            details: [\n                \"Managed data pipeline process to optimize business solution components and prototypes. \",\n\"Created a SQL database and dealt with row data from clients and input data into Excel spreadsheets.\",\n\"Implemented remote SQL access for different user groups for improved working efficiency\",\n\"Leveraged Python Matplotlib and Tableau to perform data visualization for client meetings\"\n\n            ]\n        }\n    ],\n    projects: [\n        {\n            title: \"Course Enrollment System\",\n            details: [\n                \"Programmed with Java\",\n                \"Connected DB with xxx\",\n                \"Deplloyed on AWS\"\n            ]\n        }\n    ],\n    educations: [\n        {\n            major: \"Master of Computer Science\",\n            date: \"May 2020 - expected May 2022\",\n            school: \"University of California, Berkly\"\n        }\n    ],\n    skills: [\n        \"Java\",\n        \"C++\",\n        \"AWS\",\n        \"Kubernetes\"\n    ]\n}","import React, { useState } from \"react\";\nimport { resumeContent } from \"../resumeContent\";\nimport Button from \"@material-ui/core/Button\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport \"./ResumeHeader.css\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport ReactGA from \"react-ga\";\n\n// React 16.8 React hook\nexport default function ResumeHeader() {\n  const [openSnackBar, setOpenSnackBar] = useState(false);\n  return (\n    <div className=\"background-color-purple full-size resume-header-style\">\n      <h2>{resumeContent.name}</h2>\n      <h4>{resumeContent.title}</h4>\n      <h5>{resumeContent.location}</h5>\n      <p>{resumeContent.selfIntro}</p>\n      <div>\n        <Button\n          color=\"primary\"\n          startIcon={<EmailIcon />}\n          onClick={handleEmailButtonClick}\n        >\n          {resumeContent.email}\n        </Button>\n      </div>\n      <div>\n        <PhoneIcon />\n        {resumeContent.phone}\n      </div>\n      <div>\n        <Button\n          color=\"primary\"\n          startIcon={<GitHubIcon />}\n          onClick={handleGithubClick}\n        >\n          {resumeContent.github}\n        </Button>\n      </div>\n      <Snackbar\n        open={openSnackBar}\n        autoHideDuration={6000}\n        onClose={handleSnackbarClose}\n      >\n        <Alert onClose={handleSnackbarClose} severity=\"success\">\n          Email {resumeContent.email} copied successful!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n\n  function handleEmailButtonClick() {\n    //send event to google analytics\n    ReactGA.event({\n      category: \"User\",\n      action: \"Copied email address\",\n    });\n    navigator.clipboard.writeText(resumeContent.email).then(() => {\n      setOpenSnackBar(true);\n    });\n  }\n\n  function handleSnackbarClose() {\n    setOpenSnackBar(false);\n  }\n\n  function handleGithubClick() {\n    //send event to google analytics\n    ReactGA.event({\n      category: \"User\",\n      action: \"Checked github repo\",\n    });\n    window.open(`https://github.com/${resumeContent.github}`);\n  }\n}\n","import React from 'react';\nimport WorkIcon from '@material-ui/icons/Work';\nimport { resumeContent } from '../../../resumeContent';\n\nexport default function Experience() {\n    return (\n        <div>\n            <div className=\"font-color-purple margin-bottom-title\"><WorkIcon /> Experience</div>\n            {renderExperience()}\n        </div>\n    );\n\n    function renderExperience() {\n        return resumeContent.experiences.map(experience => {\n            return (\n                <div>\n                    <b className=\"margin-left-content\">{experience.title}</b>\n                    <div className=\"margin-left-content\">{experience.company}</div>\n                    <div className=\"margin-left-content\">{experience.date}</div>\n                    <ul>\n                        {experience.details.map(detail => <li className=\"grey\">{detail}</li>)}\n                    </ul>\n                </div>\n            );\n        })\n    }\n}","import React from 'react';\nimport StarIcon from '@material-ui/icons/Star';\nimport { resumeContent } from '../../../resumeContent';\n\nexport default function Project() {\n    return (\n        <div>\n            <div className=\"font-color-purple margin-bottom-title\"><StarIcon /> Project</div>\n            {renderProject()}\n        </div>\n    );\n\n    function renderProject() {\n        return resumeContent.projects.map(project => {\n            return (\n                <div>\n                    <b className=\"margin-left-content\">{project.title}</b>\n                    <ul>\n                        {project.details.map(detail => <li className=\"grey\">{detail}</li>)}\n                    </ul>\n                </div>\n            );\n        })\n    }\n}","import React from 'react';\nimport SchoolIcon from '@material-ui/icons/School';\nimport { resumeContent } from '../../../resumeContent';\n\nexport default function Education() {\n    return (\n        <div>\n            <div className=\"font-color-purple margin-bottom-title\"><SchoolIcon /> Education</div>\n            {renderEducation()}\n        </div>\n    );\n\n    function renderEducation() {\n        return resumeContent.educations.map(eduction => {\n            return (\n                <div>\n                    <b className=\"margin-left-content\">{eduction.major}</b>\n                    <div className=\"margin-left-content\">{eduction.date}</div>\n                    <div className=\"margin-left-content grey\">{eduction.school}</div>\n                </div>\n            );\n        })\n    }\n}","import React from 'react';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport { resumeContent } from '../../../resumeContent';\nimport Chip from '@material-ui/core/Chip';\n\nexport default function Skills() {\n    return (\n        <div>\n            <div className=\"font-color-purple margin-bottom-title margin-top-16px\"><AttachFileIcon /> Skills</div>\n            {renderSkills()}\n        </div>\n    );\n\n    function renderSkills() {\n    return resumeContent.skills.map(skill => <Chip clickable \n        label={skill} className=\"background-color-purple margin-left-content\"\n        size=\"small\" /> )\n    }\n}","import React from 'react';\nimport Experience from './parts/Experience';\nimport './ResumeContent.css';\nimport Project from './parts/Project';\nimport Education from './parts/Edcutation';\nimport Skills from './parts/Skills';\n\n// React 16.8 React hook\nexport default function ResumeContent() {\n    return (\n        <div>\n            <Experience />\n            <Project />\n            <Education />\n            <Skills />\n        </div>\n    );\n}","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport ResumeHeader from \"./components/ResumeHeader\";\nimport ResumeContent from \"./components/resume-contents/ResumeContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ReactGA from \"react-ga\";\n\nfunction App() {\n  useEffect(() => {\n    ReactGA.initialize(\"UA-175987546-1\");\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []);\n  return (\n    <Grid container justify=\"center\">\n      <Grid container item xs={4}>\n        <ResumeHeader />\n      </Grid>\n      <Grid container item xs={8}>\n        <ResumeContent />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}